# removed due to low usage (<20k weekly downloads on 2025-09-01, ref: https://npmtrends.com/dripsy)
# - id: styling_techniques_dripsy
#   npm: dripsy
#   github: nandorojo/dripsy
#   description: Unstyled, responsive UI primitives for React Native + Web.
#   homepage: https://www.dripsy.xyz/
#   name: Dripsy
#   author: Fernando Rojo
#   example:
#     language: jsx
#     code: |
#       <View sx={{ bg: '$primary', height: [100, 200] }} />

- id: styling_techniques_emotion
  name: Emotion
  npm: "@emotion/native"
  homepage: https://emotion.sh/
  description: CSS-in-JS library designed for high performance style composition.
  github: emotion-js/emotion
  example:
    language: jsx
    code: |
      const Card = styled.View`
        background-color: ${props => props.theme.primary};
        height: 100px;
      `

- id: styling_techniques_inline
  name: Inline styling
  description: A straightforward method of applying styles directly within the component using the style prop.
  homepage: https://reactnative.dev/docs/view
  example:
    language: jsx
    code: |
      <View style={{ height: 100, backgroundColor: "red" }} />

- id: styling_techniques_style_sheet
  name: StyleSheet API
  homepage: https://reactnative.dev/docs/stylesheet
  description: A built-in React Native API for creating stylesheets that improve performance and organization of styles.
  example:
    language: jsx
    code: |
      const styles = StyleSheet.create({
        card: { height: 100, backgroundColor: "red" }
      })

      function Component() {
        return <View style={styles.card} />
      }

- id: styling_techniques_nativewind
  name: NativeWind
  homepage: https://www.nativewind.dev/
  github: marklawlor/nativewind
  description: A utility-first design system for React Native that leverages Tailwind CSS for styling components.
  npm: nativewind
  author: Mark Lawlor
  example:
    language: jsx
    code: |
      <View className="h-[100] md:h-[200] bg-primary" />

- id: styling_techniques_react_native_unistyles
  name: react-native-unistyles
  npm: react-native-unistyles
  homepage: https://www.unistyl.es/
  github: jpudysz/react-native-unistyles
  description: A cross-platform library that enables you to share up to 100% of your styles across all platforms. It combines the simplicity of StyleSheet with the performance of C++.
  author: Jacek Pudysz
  example:
    language: jsx
    code: |
      const stylesheet = createStyleSheet(theme => ({
        card: {
          height: {
            xs: 100,
            md: 200
          },
          backgroundColor: theme.colors.primary
        }
      })

      function Component() {
        const { styles } = useStyles(stylesheet)
        return <View style={styles.card} />
      }

- id: styling_techniques_react_strict_dom
  name: React Strict DOM
  npm: react-strict-dom
  homepage: https://facebook.github.io/react-strict-dom
  github: facebook/react-strict-dom
  description: React Strict DOM (RSD) standardizes the development of styled React components for web and native.
  author: Meta
  example:
    language: jsx
    code: |
      const theme = css.createTheme({ /* ... */ })

      const styles = css.create({
        card: {
          height: 100,
          backgroundColor: theme.primary,
        }
      })

      function Component() {
        return (
          <html.div style={styles.card} />
        );
      }

- id: styling_techniques_restyle
  name: Restyle
  npm: "@shopify/restyle"
  github: Shopify/restyle
  description: A type-enforced system for building UI components in React Native with TypeScript. It's a library for building UI libraries, with themability as the core focus.
  homepage: https://shopify.github.io/restyle/
  author: Shopify
  example:
    language: jsx
    code: |
      <Box backgroundColor="primary" height={{ sm: 100, md: 200 }} />

- id: styling_techniques_styled_components
  name: styled components
  homepage: https://styled-components.com/docs/basics#react-native
  npm: styled-components
  github: styled-components/styled-components
  description: Visual primitives for the component age. Use the best bits of ES6 and CSS to style your apps without stress. Utilising tagged template literals and the power of CSS, styled-components allows you to write actual CSS code to style your components.
  example:
    language: jsx
    code: |
      const Card = styled.View`
        background-color: ${props => props.theme.primary};
        height: 100px;
      `

- id: styling_techniques_stylex
  name: StyleX
  homepage: https://stylexjs.com/
  npm: "@stylexjs/stylex"
  github: facebook/stylex
  description: The styling system that powers Meta products (e.g. Facebook, Instagram).
  author: Meta
  example:
    language: jsx
    code: |
      const vars = stylex.defineVars({ /* ... */ })

      const styles = stylex.create({
        card: {
          backgroundColor: vars.primary,
          height: vars.height,
        }
      })

      <View {...stylex.props(styles.base)} />

- id: styling_techniques_tamagui
  name: Tamagui
  homepage: https://tamagui.dev/
  github: tamagui/tamagui
  description: A style library for React and React Native with a large typed superset of the React Native style API, with no outside dependencies.
  npm: tamagui
  author: Nate Wienert
  example:
    language: jsx
    code: |
      const Card = styled(View, {
        height: {
          sm: 100,
          md: 200,
        },
        backgroundColor: '$primary',
      });

- id: styling_techniques_twrnc
  name: Tailwind React Native Classnames (twrnc)
  description: A simple, expressive API for TailwindCSS + React Native, written in TypeScript.
  npm: twrnc
  github: jaredh159/tailwind-react-native-classnames
  author: Jared Henderson
  example:
    language: jsx
    code: |
      <View style={tw("h-[100] md:h-[200] bg-primary")} />
