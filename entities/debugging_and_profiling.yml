- id: debugging_profiling_console
  name: console API
  homepage: https://developer.mozilla.org/en-US/docs/Web/API/console
  example:
    language: jsx
    code: |
      console.log("Hello React Native! ðŸ˜Š")

- id: debugging_profiling_radon_ide
  name: Radon IDE
  homepage: https://ide.swmansion.com/
  description: A better developer experience for React Native developers. A Visual Studio Code / Cursor IDE extension that aims to simplify the development of React Native applications.
  author: Software Mansion

# removed to focus on current tools as legacy options are now outdated
# - id: debugging_profiling_legacy_javascript_hermes_debugging
#   name: Legacy JavaScript runtime debuggers
#   description: "_(React Native built-in)_ JavaScript runtime debugging solutions up to React Native 0.75 (from before <strong>React Native DevTools</strong> era) - <i>experimental New Debugger</i>, <i>Hermes debugging</i> or <i>remote JavaScript debugging</i>."
#   homepage:
#   resources:
#     - title: Deprecated remote JavaScript debugging
#       url: https://reactnative.dev/docs/other-debugging-methods#remote-javascript-debugging-deprecated
#     - title: The preview of the experimental new debugger experience with a new debugger frontend.
#       url: https://github.com/react-native-community/discussions-and-proposals/discussions/733

- id: debugging_profiling_react_native_devtools
  name: React Native DevTools
  description: "_(React Native built-in)_ The new default debugging experience introduced in React Native 0.76, leveraging <strong>Chrome DevTools Protocol</strong> (<strong><i>Console API</i>, <i>Sources & breakpoints</i></strong>) and providing integrated <strong>React DevTools</strong> functionality as a core feature."
  homepage: https://github.com/react-native-community/discussions-and-proposals/discussions/819

# replaced by React DevTools Components Tab and  React DevTools Profiler Tab
# - id: debugging_profiling_react_devtools
#   name: React DevTools
#   author: Meta
#   description: "A desktop application providing <strong>Component Inspector</strong> and <strong>Performance Profiler</strong> panels, mirroring functionality from web browser extension. Now seamlessly integrated within <strong>React Native DevTools</strong>."
#   homepage: https://reactnative.dev/docs/react-devtools

- id: debugging_profiling_react_devtools_components_tab
  name: React DevTools Components Tab
  author: Meta
  description: "_(React Native built-in)_ Allows inspection of the React component tree, with the ability to view and edit props, state, and hooks, and understand the relationships between components."
  homepage: https://reactnative.dev/docs/react-devtools

- id: debugging_profiling_react_devtools_profiler_tab
  name: React DevTools Profiler Tab
  author: Meta
  description: "_(React Native built-in)_ Allows inspection of the React component tree, with the ability to view and edit props, state, and hooks, and understand the relationships between components."
  homepage: https://reactnative.dev/docs/react-devtools

- id: debugging_profiling_element_inspector
  name: Element Inspector
  description: _(React Native built-in)_ A debugging utility that, once enabled, allows inspection of UI elements through direct interaction, displaying detailed component information upon tap directly within the app.
  homepage: https://reactnative.dev/docs/react-devtools#integration-with-the-element-inspector
  npm: react-native-element-inspector

- id: debugging_profiling_logbox
  name: LogBox
  description: _(React Native built-in)_ An overlay system that automatically surfaces whenever console errors or warnings occur, providing comprehensive error reporting.
  homepage: https://reactnative.dev/docs/debugging#logbox

- id: debugging_profiling_performance_monitor
  name: Performance Monitor
  description: _(React Native built-in)_ An integrated performance monitoring overlay that provides real-time metrics visualization. Allows inspection of RAM consumption, UI and JS threads FPS and number of views mounted.
  homepage: https://reactnative.dev/docs/performance

# removed due to a consistent downward trend in usage (as of 2025-09-01, ref: https://npmtrends.com/react-native-flipper)
# - id: debugging_profiling_flipper
#   name: Flipper
#   description: A desktop application enabling cross-platform debugging for mobile apps. Visualize, inspect, and control your apps from a desktop interface, with extensibility via plugins.
#   homepage: https://fbflipper.com/
#   github: facebook/flipper
#   author: Meta
#   npm: react-native-flipper

- id: debugging_profiling_reactotron
  name: Reactotron
  description: A desktop application for inspecting your React and React Native projects. Enables monitoring application's state, network requests, and performance metrics.
  homepage: https://docs.infinite.red/reactotron/
  github: infinitered/reactotron
  author: Infinite Red

- id: debugging_profiling_react_native_performance
  name: Performance API (react-native-performance)
  description: A runtime library that delivers an implementation of the Performance API for React Native based on the User Timing Level 3 and Performance Timeline Level 2 drafts.
  github: oblador/react-native-performance
  author: Joel Arvidsson
  npm: react-native-performance

- id: debugging_profiling_flashlight
  name: Flashlight
  description: Lighthouse for Mobile - a web service that audits your app and gives a performance score to your Android apps.
  homepage: https://flashlight.dev/
  github: bamlab/flashlight
  author: Theodo Apps (former BAM)

- id: debugging_profiling_native_debugging
  name: Native debugging
  description: (Xcode, Android Studio) Platform-native tools for debugging app behavior, variables, and execution flow.
  homepage: https://developer.android.com/studio/debug

- id: debugging_profiling_native_profiling
  name: Native profiling
  description: (Xcode, Android Studio) Platform-native tools for profiling app performance, memory usage, and resource consumption.
  homepage: https://developer.android.com/studio/profile

- id: debugging_profiling_expo_devtools_plugins
  name: Expo DevTools Plugins
  description: A plugin system for Expo DevTools that enables developers to create custom debugging and development tools. Allows integration of third-party debugging tools and custom functionality directly into the Expo development environment.
  homepage: https://docs.expo.dev/debugging/devtools-plugins/
  github: expo/dev-plugins

- id: debugging_profiling_network_inspector_expo
  name: Network Inspector
  author: Expo
  description: A network inspector available only in Expo projects that allows you to monitor and debug network requests made by your app.
  homepage: https://docs.expo.dev/debugging/tools/#inspecting-network-requests
